{"componentChunkName":"component---node-modules-gatsby-theme-apollo-docs-src-components-template-js","path":"/open-api/swagger-api/","result":{"data":{"site":{"pathPrefix":"/doc.ift.org","siteMetadata":{"title":"IFT Docs","description":"A guide to IFT's standards and APIs"}},"file":{"childMarkdownRemark":null,"childMdx":{"frontmatter":{"title":"Playground","description":"Test the IFT APIs and standards"},"headings":[],"fields":{"image":"social-cards/swagger-api.png","graphManagerUrl":""},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Playground\",\n  \"description\": \"Test the IFT APIs and standards\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(SwaggerUI, {\n    url: \"https://api.swaggerhub.com/apis/BlueCoder77/GDST/1.3.0\",\n    mdxType: \"SwaggerUI\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"id":"4c894334-be62-50a5-9766-406a1ec90909","subtitle":"IFT Documentations","versionDifference":0,"versionBasePath":"/vdefault","sidebarContents":[{"title":null,"pages":[{"title":"Documentation Home","description":"Explore the Global Dialogue on Seafood Traceability Documentation GitHub","path":"/"},{"title":"Executive Summary","description":null,"path":"/intro/executive-summary/"},{"title":"Feedback and Caveats","description":"Process, known issues, caveats and feedback requested.","path":"/intro/feedback/"}]},{"title":"Pretext","pages":[{"title":"Why EPCIS?","description":"Here is page that covers why we chose EPCIS as the interoperable data format standard.","path":"/pretext/why-epcis/"},{"title":"Why Extension?","description":null,"path":"/pretext/why-extension/"},{"title":"Why IUU?","description":null,"path":"/pretext/why-iuu/"}]},{"title":"Certifications","pages":[{"title":"MSC/ASC Coc","description":null,"path":"/certification/msc-asc/"},{"title":"Other certifications (non-seafood sustainability, fair trade)","description":null,"path":"/certification/other-cert/"}]},{"title":"Regulatory","pages":[{"title":"SIMP - Aquaculture","description":null,"path":"/regulatory/simp-aquaculture/"},{"title":"SIMP - Wild Harvest","description":null,"path":"/regulatory/simp-wild-harvest/"},{"title":"EU Catch Certificate","description":null,"path":"/regulatory/eu-catch-cert/"},{"title":"Non Western Regulations","description":null,"path":"/regulatory/non-western-regulations/"}]},{"title":"Aquaculture Events","pages":[{"title":"Master Data","description":"This page contains example master data that is used in events recorded for products harvested from the wild.","path":"/aquaculture-events/master-data/"},{"title":"Broodstock / Hatching","description":null,"path":"/aquaculture-events/brood-stock/"},{"title":"Feeding","description":"Covers event data that is recorded around the feeding of products while they are being grown at an aquaculture facility.","path":"/aquaculture-events/feeding/"},{"title":"Farm Harvest","description":null,"path":"/aquaculture-events/farm-harvest/"},{"title":"Wild to Farmed","description":"This covers scenarios where products are harvested from the wild to stock an aquaculture facility. Then those products are harvested from the aquaculture facility when they are ready for commerical use.","path":"/aquaculture-events/wild-to-farmed/"},{"title":"Commodities","description":"How to handle the different scenarios across the diverse amount of commodities.","path":"/aquaculture-events/commodities/"}]},{"title":"Wild Events","pages":[{"title":"Fishing Event","description":"This page covers information about capturing the Fishing / Wild Harvest event.","path":"/wild-events/fishing-events/"},{"title":"On Vessel Processing","description":"This page covers information about capturing events in regards to On-Vessel Processing.","path":"/wild-events/on-vessel-processing/"},{"title":"TransShipment","description":"How to record the Landing events given different scenarios.","path":"/wild-events/transshipment/"},{"title":"Landing","description":"How to record the Landing events given different scenarios.","path":"/wild-events/landing/"},{"title":"Gear Types","description":"How to record events based on the different gear types used.","path":"/wild-events/gear-types/"},{"title":"Mari-Culture","description":null,"path":"/wild-events/mari-culture/"},{"title":"Commodities","description":"How to handle the different scenarios across the diverse amount of commodities.","path":"/wild-events/commodities/"}]},{"title":"EPCIS Extensions","pages":[]},{"title":"Open API","pages":[{"title":"REST API Examples for Events","description":null,"path":"/open-api/examples/"},{"title":"Playground","description":"Test the IFT APIs and standards","path":"/open-api/swagger-api/"}]},{"title":"Resources","pages":[{"title":"Featured implementations","description":"A list of project implemented GDST standard","path":"/resources/featured-implementation/"},{"title":"Appendix","description":null,"path":"/resources/"}]},{"title":"Contributions","pages":[{"title":"Edit documentation","description":"How to work on this documentation","path":"/contributions/how-to-work-on-doc/"},{"title":"Request documentation","description":"How to submit a request for new documentation","path":"/contributions/how-to-request-new-doc/"},{"title":"Peer review","description":"How to submit your edit for review and merge","path":"/contributions/how-to-submit-work-for-review/"},{"title":"Contributors","description":"List of those involved, in alphabetical order.","path":"/contributions/authors/"},{"title":"Contacts","description":"List of contacts in case of inquiry.","path":"/contributions/contacts/"}]}],"githubUrl":"https://github.com/ift-gftc/doc.ift.org/tree/master/source/open-api/swagger-api.mdx","spectrumUrl":"https://spectrum.chat/ift/doc-ift-org","twitterHandle":"IFT","versions":[],"defaultVersion":"default","baseUrl":"https://louisgv.github.io/doc.ift.org/"}}}